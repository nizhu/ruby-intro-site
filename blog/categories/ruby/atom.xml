<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Ruby Intro]]></title>
  <link href="http://nizhu.github.io/ruby-intro-site/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://nizhu.github.io/ruby-intro-site/"/>
  <updated>2013-08-04T17:32:21+10:00</updated>
  <id>http://nizhu.github.io/ruby-intro-site/</id>
  <author>
    <name><![CDATA[Nick Zhu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Accessing Twitter's API]]></title>
    <link href="http://nizhu.github.io/ruby-intro-site/blog/2013/08/01/accessing-the-twitter-api/"/>
    <updated>2013-08-01T19:25:00+10:00</updated>
    <id>http://nizhu.github.io/ruby-intro-site/blog/2013/08/01/accessing-the-twitter-api</id>
    <content type="html"><![CDATA[<p>Since mid June this year, the Twitter has forced users to use OAuth to authenticate and access its API. You can no longer access its data in a trivial way like the GitHub example before. You must get 4 keys from <a href="https://dev.twitter.com/apps">Twitter&rsquo;s developer page</a>: <code>Consumer key</code>, <code>Consumer secret</code>, <code>Access token</code> and <code>Access secret</code> &ndash; don&rsquo;t need to know what they mean yet, but the 2 secret keys should not be shared. OAuth is a real pain. These 4 keys won&rsquo;t give you access. They&rsquo;ll let you get 3 more one use keys which you can then use to access the API.</p>

<p>Fortunately for you as a Ruby user, there are two libraries that will do all the menial work for you. <a href="https://github.com/sferik/twitter">Twitter</a> is a conveniently named library to access the standard Twitter API (it is not developed by Twitter Inc) while the other is <a href="https://github.com/tweetstream/tweetstream">TweetStream</a> is designed to use Twitter&rsquo;s streaming API. It&rsquo;s unlikely that you&rsquo;ll need to use the streaming API for this assignment so I won&rsquo;t be showing you TweetStream.</p>

<h2>Twitter Gem</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout twitter
</span><span class='line'>gem install twitter</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I&rsquo;ve made a file out of the gem&rsquo;s authentication configuration code taken from its documentation. Just replace the strings with the your Twitter developer keys in twitter_config.rb. There are some usage examples <a href="https://github.com/sferik/twitter#usage-examples">here</a>, but there&rsquo;s plenty more functionality so do refer to the <a href="http://rdoc.info/gems/twitter">documentation</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require &lsquo;twitter&rsquo;
</span><span class='line'>load &lsquo;twitter_config.rb&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Lets find the last person to have proposed to Justin Bieber</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>result = Twitter.search(&ldquo;to:justinbieber marry me&rdquo;, :count => 1, :result_type => &ldquo;recent&rdquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>result.class&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Twitter::SearchResults&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>result.statuses[0].user.screen_name&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>4ever_beliebing&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just to give another example, I&rsquo;m going to get the last tweet from each of users I&rsquo;m stalking.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>f = Twitter.friends
</span><span class='line'>f.class&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Twitter::Cursor&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>&mdash; &lt;a href="http://rdoc.info/gems/twitter/Twitter/Cursor">http://rdoc.info/gems/twitter/Twitter/Cursor&lt;/a>&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>f.collection.class&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Array&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>f.collection[0].class&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Twitter::User&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>&mdash; &lt;a href="http://rdoc.info/gems/twitter/Twitter/User">http://rdoc.info/gems/twitter/Twitter/User&lt;/a>&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>f.collection[0].name&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>&ldquo;John Oliver&rdquo;&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>f.collection[0].status
</span><span class='line'>f.collection[0].status.class&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Twitter::Tweet&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>&mdash; &lt;a href="http://rdoc.info/gems/twitter/Twitter/Tweet">http://rdoc.info/gems/twitter/Twitter/Tweet&lt;/a>&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>f.collection[0].status.text&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>&ldquo;Mugabe is the Harlem Globetrotters of democracy. His winning record is undeniably impressive, but he doesn&rsquo;t really play by the rules.&rdquo;&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>for user in f.collection.each
</span><span class='line'>  puts &ldquo;#{user.name} said &lsquo;#{user.status.text}&rsquo;&rdquo;
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Because we don&rsquo;t care about the return value, let&rsquo;s not do this in <code>irb</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>last_twitter_status.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;!/us</span><span class="n">r</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;require &amp;lsquo;twitter&amp;rsquo;</span>
</span><span class='line'><span class="sr">load &amp;lsquo;mine_twitter_config.rb&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">f</span> <span class="o">=</span> <span class="no">Twitter</span><span class="o">.</span><span class="n">friends</span>
</span><span class='line'><span class="k">for</span> <span class="n">user</span> <span class="k">in</span> <span class="n">f</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">each</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{user.name} said &amp;lsquo;#{user.status.text}&amp;rsquo;&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>But there&rsquo;s still a problem, I&rsquo;m following more users than this.</p>

<p>This is because Twitter paginates the results to 20 by default.  So if there is more than 20 records, you&rsquo;ll have to iterate through each page to get all the results.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lots_twitter_status.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;!/us</span><span class="n">r</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;require &amp;lsquo;twitter&amp;rsquo;</span>
</span><span class='line'><span class="sr">load &amp;lsquo;mine_twitter_config.rb&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">cursor</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">while</span> <span class="n">cursor</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">f</span> <span class="o">=</span> <span class="no">Twitter</span><span class="o">.</span><span class="n">friends</span> <span class="ss">:cursor</span> <span class="o">=&gt;</span> <span class="n">cursor</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">user</span> <span class="k">in</span> <span class="n">f</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">each</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="sr"> said &#39;</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">text</span><span class="si">}</span><span class="sr">&#39;&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  cursor = f.next_cursor</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just to a more relevant example, this is to get the last 200 tweets with #ausvotes excluding retweets. Search results pagination work slightly different to friends &ndash; refer to documentation!!</p>

<p>Note that the count parameter refers to the number you want per page, although the maximum is 100.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>recent_ausvotes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;!/us</span><span class="n">r</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;require &amp;lsquo;twitter&amp;rsquo;</span>
</span><span class='line'><span class="sr">load &amp;lsquo;mine_twitter_config.rb&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">max_id</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="no">Twitter</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#ausvotes -rt&amp;rdquo;, :count =&gt; 100, :result_type =&gt; &amp;ldquo;recent&amp;rdquo;, :max_id =&gt; max_id)</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">statuses</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">tweet</span> <span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;</span><span class="si">#{</span><span class="n">tweet</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="sr"> said </span><span class="si">#{</span><span class="n">tweet</span><span class="o">.</span><span class="n">text</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  max_id = t.next_results[:max_id]</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li><a href="https://github.com/sferik/twitter">RubyGem &ndash; Twitter</a></li>
<li><a href="https://github.com/tweetstream/tweetstream">RubyGem &ndash; Tweetstream</a></li>
<li><a href="https://dev.twitter.com/docs/auth">Twitter API Authentication Documentation</a></li>
<li><a href="https://dev.twitter.com/docs/api/1.1">Twitter API</a></li>
<li><a href="https://dev.twitter.com/apps">Twitter Developer Apps</a></li>
<li><a href="http://rdoc.info/gems/twitter">RDoc Twitter</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Consuming JSON REST resource through HTTP]]></title>
    <link href="http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/consuming-json-rest-resource-through-http/"/>
    <updated>2013-07-31T21:44:00+10:00</updated>
    <id>http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/consuming-json-rest-resource-through-http</id>
    <content type="html"><![CDATA[<p>As you saw in the previous post, XML is an overly verbose format so in the last few years, what we call JSON (JavaScript Object Notation) has come to dominate web communication. Ideally I&rsquo;d be demonstrating this with Twitter&rsquo;s API since you&rsquo;re likely to use it for this assignment, but since mid June this year, the Twitter API requires OAuth to access. I will be address this in the next post.</p>

<p>If you&rsquo;ve been writing Javascript, you love JSON. If you haven&rsquo;t, you soon will. Note that spaces, tabs and line breaks are all optional. I&rsquo;ve just added those to make it easier to read.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  &ldquo;id&rdquo;: 32,
</span><span class='line'>  &ldquo;name&rdquo;: &ldquo;Mother Duck&rdquo;,
</span><span class='line'>  &ldquo;children&rdquo;:[&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>{
</span><span class='line'>  "id": 12345,
</span><span class='line'>  "name": "Claire"
</span><span class='line'>},
</span><span class='line'>{
</span><span class='line'>  "id": 12372,
</span><span class='line'>  "name": "Daniel"
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  ],
</span><span class='line'>  &ldquo;isAlive&rdquo;: true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That&rsquo;s all there is to JSON, very simple, very clear. <code>{}</code> encapsulates object/map/hash, while <code>[]</code> encapsulates an array, both of which can be nested infinitely. Otherwise only strings, numbers, booleans and null are supported values.</p>

<h2>Github API</h2>

<p>GitHub is an online source repository, extremely popular with open source projects. You won&rsquo;t be using any data from it for your projects, but it&rsquo;s the first public JSON API that came across my mind. I&rsquo;m sure you&rsquo;ll be using it somewhere in your career though. For this demonstration, I&rsquo;ll just be using the most simple of calls, retrieving the details of the GitHub user octocat. The documentation for GitHub&rsquo;s API is available <a href="http://developer.github.com/v3/">here</a>.</p>

<p>The easiest way to access this data, is to simply open a web browser and go to <code>https://api.github.com/users/octocat</code>. Next step further is accessing it through cURL.. <code>curl https://api.github.com/users/octocat</code>. Let&rsquo;s do it in Ruby.</p>

<h2>Retrieving with Net/HTTP and parsing with json</h2>

<p><a href="http://ruby-doc.org/stdlib-2.0/libdoc/net/http/rdoc/Net/HTTP.html">Net/HTTP</a> is a standard Ruby library, and it&rsquo;ll be your interface to the internet. JSON is a simple parser, but is not standard. As before, install the gem with <code>gem install json</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require &lsquo;net/http&rsquo;
</span><span class='line'>require &lsquo;json&rsquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>uri = URI(&lsquo;&lt;a href="https://api.github.com/users/octocat">https://api.github.com/users/octocat&lt;/a>&rsquo;)
</span><span class='line'>response = Net::HTTP.get uri
</span><span class='line'>octocat = JSON.parse response&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>octocat.keys&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>[&ldquo;login&rdquo;, &ldquo;id&rdquo;, &ldquo;avatar_url&rdquo;, &ldquo;gravatar_id&rdquo;, &ldquo;url&rdquo;, &ldquo;html_url&rdquo;, &ldquo;followers_url&rdquo;, &ldquo;following_url&rdquo;, &ldquo;gists_url&rdquo;, &ldquo;starred_url&rdquo;, &ldquo;subscriptions_url&rdquo;, &ldquo;organizations_url&rdquo;, &ldquo;repos_url&rdquo;, &ldquo;events_url&rdquo;, &ldquo;received_events_url&rdquo;, &ldquo;type&rdquo;, &ldquo;name&rdquo;, &ldquo;company&rdquo;, &ldquo;blog&rdquo;, &ldquo;location&rdquo;, &ldquo;email&rdquo;, &ldquo;hireable&rdquo;, &ldquo;bio&rdquo;, &ldquo;public_repos&rdquo;, &ldquo;followers&rdquo;, &ldquo;following&rdquo;, &ldquo;created_at&rdquo;, &ldquo;updated_at&rdquo;, &ldquo;public_gists&rdquo;]&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>octocat[&ldquo;followers&rdquo;]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>398&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>octocat[&ldquo;public_repos&rdquo;]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>3&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>octocat[&ldquo;hireable&rdquo;]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>false&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I had some issues here with openssl on the Mac, but the update instructions with Homebrew found <a href="http://railsapps.github.io/openssl-certificate-verify-failed.html">here</a> worked perfectly.</p>

<ol>
<li><a href="http://json.org/example.html">JSON Examples</a></li>
<li><a href="http://ruby-doc.org/stdlib-2.0/libdoc/net/http/rdoc/Net/HTTP.html">Ruby Net/HTTP</a></li>
<li><a href="http://flori.github.io/json/doc/index.html">Rubygem json</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parsing XML with XMLSimple]]></title>
    <link href="http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/parsing-xml-with-xmlsimple/"/>
    <updated>2013-07-31T20:19:00+10:00</updated>
    <id>http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/parsing-xml-with-xmlsimple</id>
    <content type="html"><![CDATA[<p>For the purpose of this exercise, I&rsquo;ve downloaded and extracted a zip file from the AEC&rsquo;s site <code>ftp://results.aec.gov.au/15508/Detailed/Light/aec-mediafeed-Detailed-Light-15508-20100817220150.zip</code> Ruby has an XML parser called REXML in its standard library, but it&rsquo;s known to be very slow &ndash; <a href="http://www.rubyinside.com/ruby-xml-performance-benchmarks-1641.html">Some 50 times slower than Nokogiri</a>. I would love to demonstrate Nokogiri, but unfortunately it&rsquo;s more complex to use than XmlSimple. XmlSimple parses the data into a native Ruby hash whereas Nokogiri has its own set of classes.</p>

<h1>Third Party libraries</h1>

<p>Third party libraries in Ruby are referred to as gems. Gem is an executable that comes with Ruby. Tell it to install, along with the name of the gem and it will download and install the gem that you want as well as all its dependencies.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install xml-simple</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Let&rsquo;s Parse!</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require &lsquo;xmlsimple&rsquo;
</span><span class='line'>xml = File.read &lsquo;data/xml/aec-mediafeed-results-detailed-light-15508.xml&rsquo;
</span><span class='line'>data = XmlSimple.xml_in xml</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Parsing XML takes a little while, and XmlSimple isn&rsquo;t the most efficient of parsers. If speed is a concern at all, you should definitely look into <a href="http://nokogiri.org/">Nokogiri</a>.</p>

<p>Once it&rsquo;s done we can see what&rsquo;s in there one step at a time.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data.keys&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>[&ldquo;Id&rdquo;, &ldquo;Created&rdquo;, &ldquo;SchemaVersion&rdquo;, &ldquo;EmlVersion&rdquo;, &ldquo;xmlns&rdquo;, &ldquo;xmlns:eml&rdquo;, &ldquo;xmlns:ds&rdquo;, &ldquo;xmlns:xal&rdquo;, &ldquo;xmlns:xnl&rdquo;, &ldquo;xmlns:ts&rdquo;, &ldquo;xmlns:xs&rdquo;, &ldquo;xs:schemaLocation&rdquo;, &ldquo;ManagingAuthority&rdquo;, &ldquo;MessageLanguage&rdquo;, &ldquo;MessageGenerator&rdquo;, &ldquo;Cycle&rdquo;, &ldquo;Results&rdquo;]&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data.[&ldquo;Results&rdquo;].keys&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>NoMethodError&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data.[&ldquo;Results&rdquo;].class&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Array&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data.[&ldquo;Results&rdquo;][0].class&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Hash&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data[&ldquo;Results&rdquo;][0][&ldquo;Election&rdquo;][0][&ldquo;House&rdquo;][0][&ldquo;Contests&rdquo;][0][&ldquo;Contest&rdquo;][0].keys&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>[&ldquo;Projected&rdquo;, &ldquo;ContestIdentifier&rdquo;, &ldquo;Enrolment&rdquo;, &ldquo;FirstPreferences&rdquo;, &ldquo;TwoCandidatePreferred&rdquo;, &ldquo;TwoPartyPreferred&rdquo;, &ldquo;PollingPlaces&rdquo;]&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data[&ldquo;Results&rdquo;][0][&ldquo;Election&rdquo;][0][&ldquo;House&rdquo;][0][&ldquo;Contests&rdquo;][0][&ldquo;Contest&rdquo;][0][&ldquo;TwoPartyPreferred&rdquo;][0][&ldquo;Coalition&rdquo;][0][&ldquo;Votes&rdquo;]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>0&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data[&ldquo;Results&rdquo;][0][&ldquo;Election&rdquo;][0][&ldquo;House&rdquo;][0][&ldquo;Contests&rdquo;][0][&ldquo;Contest&rdquo;][0][&ldquo;Enrolment&rdquo;]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>124215&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classes]]></title>
    <link href="http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/classes/"/>
    <updated>2013-07-31T09:14:00+10:00</updated>
    <id>http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/classes</id>
    <content type="html"><![CDATA[<p>Ruby is a Object Oriented language so it&rsquo;s no less than intuitive to have classes. The following code block shows the basic syntax of a Ruby class.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Counter
</span><span class='line'>  @@classCount = 0
</span><span class='line'>  @instanceCount&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def initialize(startInstanceCount)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>@instanceCount = startInstanceCount
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def icIncrement&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>@instanceCount += 1
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def self.ccIncrement&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>@@classCount += 1
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def to_s&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>"classCount = #{@@classCount} and instanceCount = #{@instanceCount}"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We have a Class variable, <code>@@classCount</code>. This is equivalent to the keyword <code>static</code> in Java. There&rsquo;s an Instance variable <code>@instanceCount</code>.</p>

<p>Then there are the methods. <code>initialize</code> is the constructor used when you run <code>Counter.new</code>, <code>icIncrement</code> is an instance method, while <code>self.ccIncrement</code> is a class method &ndash; called with <code>Counter.ccIncrement</code>.</p>

<p>Finally <code>to_s</code> is the conversion of the class to a String, just like <code>toString()</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = Counter.new 0
</span><span class='line'>b = Counter.new 0&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>a.ccIncrement
</span><span class='line'>a.icIncrement&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>puts b&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>classCount = 1 and instanceCount = 0&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>b = Counter.new 5
</span><span class='line'>puts b&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>classCount = 1 and instanceCount = 5&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Variable Scope</h2>

<p>Scope-wise, there are 5 different types of variables in Ruby and they are simply differentiated by the first character of their name.</p>

<ol>
<li>$: Global</li>
<li>@@: Class</li>
<li>@: Instance</li>
<li>[A-Z]: Constant</li>
<li>[a-z_]: Local</li>
</ol>


<p>Note that Constants can still be changed. The interpreter will simply issue a warning that that is the case, but the value assigning will proceed.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Aconstant = 1
</span><span class='line'>Aconstant = 2&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>warning: already initialized constant Aconstant&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>warning: previous definition of Aconstant was here&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>2&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Dynamic Typing</h2>

<p>Ruby doesn&rsquo;t care what class an object is, as long as it does what you want it to do. If it quacks like a duck, it is a duck.</p>

<p>I&rsquo;ve prepared the 3 files below already. To see them, checkout the branch <code>git checkout dynamic_typing</code>. This code is based on the code snippets in the Ruby Cookbook which was based on Ruby 1.8</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>duck.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Duck</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quack</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&#39;Quack!&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>humans.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Man</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">quack</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&#39;Moo!&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">scream</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&#39;AHHHHHH&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Woman</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">scream</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; &#39;AHHHH&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>make_it_quack.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">make_it_quack</span><span class="p">(</span><span class="n">duck</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">duck</span><span class="o">.</span><span class="n">quack</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let&rsquo;s play with again. This time, load irb with <code>irb -I .</code>. This will add the current directory to the path that the require command uses so it can find the 3 files above.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>d = Duck.new
</span><span class='line'>m = Man.new
</span><span class='line'>w = Woman.new&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>make_it_quack(d)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Quack!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>make_it_quack(m)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Moo!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>make_it_quack(w)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>NoMethodError: undefined method `quack' for #&lt;Woman:0x007fb2d91ab3d0>&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Unfortunately it seems like function parameters can no longer be given a type so the example isn&rsquo;t the most clear. This is what it looks like in the book.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def make_it_quack(Duck duck)
</span><span class='line'>  puts duck.quack
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>w = Woman.new
</span><span class='line'>make_it_quack(w)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>TypeException: object not of type Duck&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Duck Punching</h2>

<p>So what if our ducks (Man) don&rsquo;t quack? Then we punch them until it does.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make_it_quack(m)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Moo!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>class Man
</span><span class='line'>  def quack&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>"Quack!"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>make_it_quack(m)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Quack!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>m.scream&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>AHHHHHH&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just to be clear, we can also do the same to the Woman class.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make_it_quack(w)
</span><span class='line'>NoMethodError: undefined method `quack' for #&lt;Woman:0x007fbe7b99e800>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class Woman
</span><span class='line'>  def quack&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>"Quack!"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>make_it_quack(w)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Quack!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functions]]></title>
    <link href="http://nizhu.github.io/ruby-intro-site/blog/2013/07/30/functions/"/>
    <updated>2013-07-30T12:55:00+10:00</updated>
    <id>http://nizhu.github.io/ruby-intro-site/blog/2013/07/30/functions</id>
    <content type="html"><![CDATA[<p>Firstly the syntax. Let&rsquo;s first define a very basic function we can use for this post.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def print_stuff(str1, str2, reverse = false)
</span><span class='line'>  if reverse&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>puts "#{str2} and #{str1} received!"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  else&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>puts "#{str1} and #{str2} received!"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end
</span><span class='line'>  str = str1 + str2
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Calling functions</h3>

<p>Brackets around function parameters is optional in Ruby. However, sometimes it&rsquo;s useful to include them regardless for clarity&rsquo;s sake.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>print_stuff(&ldquo;First argument&rdquo;, &ldquo;Second argument&rdquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>First argument and Second argument received!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>print_stuff &ldquo;First argument&rdquo;, &ldquo;Second argument&rdquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>First argument and Second argument received!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Arguments can be made optional by giving them a default value.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>print_stuff(&ldquo;First argument&rdquo;, &ldquo;Second argument&rdquo;, false)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>First argument and Second argument received!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>print_stuff(&ldquo;First argument&rdquo;, &ldquo;Second argument&rdquo;, true)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Second argument and First argument received!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Return value</h3>

<p>As you may have already noticed, <code>print_stuff</code> does use <code>return</code> even though it does exist in Ruby and it does exactly what you&rsquo;d expect. If the return value is not specified, Ruby will return the value returned in the last executed line of the block</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def add(a, b)
</span><span class='line'>  a + b
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>puts add(1, 2)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>3&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>def add_return(a, b)
</span><span class='line'>  return a + b
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>puts add_return(1,2)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>3&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>def add_print(a, b)
</span><span class='line'>  a + b
</span><span class='line'>  print &ldquo;add successful&rdquo;
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>puts add_print(1,2)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>add successful&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Because <code>print "add successful"</code> returns <code>nil</code>, <code>add_print</code> returns nil.</p>

<h1>Error Handling</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def do_something
</span><span class='line'>  raise &ldquo;Failed to do something&rdquo;
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>raise_exception&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>RuntimeError: Failed to do something&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>begin
</span><span class='line'>  do_something
</span><span class='line'>  puts &ldquo;Done something&rdquo;
</span><span class='line'>rescue
</span><span class='line'>  puts &ldquo;Rescuing from exception&rdquo;
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Rescuing from exception&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>retry</code> will return the cursor to start of the begin block it belongs to</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>i = 0
</span><span class='line'>begin
</span><span class='line'>  puts &ldquo;#{i}&rdquo;
</span><span class='line'>  i += 1
</span><span class='line'>  if i &lt; 2&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>do_something
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end
</span><span class='line'>  puts &ldquo;All done!&rdquo;
</span><span class='line'>rescue
</span><span class='line'>  retry
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>0&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>1&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>All done!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Also relevant later on, <a href="http://innig.net/software/ruby/closures-in-ruby">Closures</a> and <a href="https://rubymonk.com/learning/books/2-metaprogramming-ruby/chapters/32-introduction-to-metaprogramming/lessons/75-being-meta">Metaprogramming</a></p>
]]></content>
  </entry>
  
</feed>
