<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Ruby Intro]]></title>
  <link href="http://nizhu.github.io/ruby-intro-site/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://nizhu.github.io/ruby-intro-site/"/>
  <updated>2013-07-31T22:17:45+10:00</updated>
  <id>http://nizhu.github.io/ruby-intro-site/</id>
  <author>
    <name><![CDATA[Nick Zhu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Consuming JSON resources through HTTP]]></title>
    <link href="http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/consuming-json-resources-through-http/"/>
    <updated>2013-07-31T21:44:00+10:00</updated>
    <id>http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/consuming-json-resources-through-http</id>
    <content type="html"><![CDATA[<p>I will be demonstrating</p>

<ol>
<li><a href="https://github.com/sferik/twitter">RubyGem &ndash; Twitter</a></li>
<li><a href="https://github.com/tweetstream/tweetstream">RubyGem &ndash; Tweetstream</a></li>
<li><a href="https://dev.twitter.com/docs/auth">Twitter API Authentication Documentation</a></li>
<li><a href="https://dev.twitter.com/docs/api/1.1">Twitter API</a></li>
<li><a href="https://dev.twitter.com/apps">Twitter Developer Apps</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parsing XML with XMLSimple]]></title>
    <link href="http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/parsing-xml-with-xmlsimple/"/>
    <updated>2013-07-31T20:19:00+10:00</updated>
    <id>http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/parsing-xml-with-xmlsimple</id>
    <content type="html"><![CDATA[<p>For the purpose of this exercise, I&rsquo;ve downloaded and extracted a zip file from the AEC&rsquo;s site <code>ftp://results.aec.gov.au/15508/Detailed/Light/aec-mediafeed-Detailed-Light-15508-20100817220150.zip</code> Ruby has an XML parser called REXML in its standard library, but it&rsquo;s known to be very slow &ndash; <a href="http://www.rubyinside.com/ruby-xml-performance-benchmarks-1641.html">Some 50 times slower than Nokogiri</a>. I would love to demonstrate Nokogiri, but unfortunately it&rsquo;s more complex to use than XmlSimple. XmlSimple parses the data into a native Ruby hash whereas Nokogiri has its own set of classes.</p>

<h1>Third Party libraries</h1>

<p>Third party libraries in Ruby are referred to as gems. Gem is an executable that comes with Ruby. Tell it to install, along with the name of the gem and it will download and install the gem that you want as well as all its dependencies.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install xml-simple</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Let&rsquo;s Parse!</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require &lsquo;xmlsimple&rsquo;
</span><span class='line'>xml = File.read &lsquo;data/xml/aec-mediafeed-results-detailed-light-15508.xml&rsquo;
</span><span class='line'>data = XmlSimple.xml_in xml</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Parsing XML takes a little while, and XmlSimple isn&rsquo;t the most efficient of parsers. If speed is a concern at all, you should definitely look into <a href="http://nokogiri.org/">Nokogiri</a>.</p>

<p>Once it&rsquo;s done we can see what&rsquo;s in there one step at a time.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data.keys&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>[&ldquo;Id&rdquo;, &ldquo;Created&rdquo;, &ldquo;SchemaVersion&rdquo;, &ldquo;EmlVersion&rdquo;, &ldquo;xmlns&rdquo;, &ldquo;xmlns:eml&rdquo;, &ldquo;xmlns:ds&rdquo;, &ldquo;xmlns:xal&rdquo;, &ldquo;xmlns:xnl&rdquo;, &ldquo;xmlns:ts&rdquo;, &ldquo;xmlns:xs&rdquo;, &ldquo;xs:schemaLocation&rdquo;, &ldquo;ManagingAuthority&rdquo;, &ldquo;MessageLanguage&rdquo;, &ldquo;MessageGenerator&rdquo;, &ldquo;Cycle&rdquo;, &ldquo;Results&rdquo;]&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data.[&ldquo;Results&rdquo;].keys&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>NoMethodError&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data.[&ldquo;Results&rdquo;].class&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Array&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data.[&ldquo;Results&rdquo;][0].class&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Hash&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data[&ldquo;Results&rdquo;][0][&ldquo;Election&rdquo;][0][&ldquo;House&rdquo;][0][&ldquo;Contests&rdquo;][0][&ldquo;Contest&rdquo;][0].keys&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>[&ldquo;Projected&rdquo;, &ldquo;ContestIdentifier&rdquo;, &ldquo;Enrolment&rdquo;, &ldquo;FirstPreferences&rdquo;, &ldquo;TwoCandidatePreferred&rdquo;, &ldquo;TwoPartyPreferred&rdquo;, &ldquo;PollingPlaces&rdquo;]&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data[&ldquo;Results&rdquo;][0][&ldquo;Election&rdquo;][0][&ldquo;House&rdquo;][0][&ldquo;Contests&rdquo;][0][&ldquo;Contest&rdquo;][0][&ldquo;TwoPartyPreferred&rdquo;][0][&ldquo;Coalition&rdquo;][0][&ldquo;Votes&rdquo;]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>0&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>data[&ldquo;Results&rdquo;][0][&ldquo;Election&rdquo;][0][&ldquo;House&rdquo;][0][&ldquo;Contests&rdquo;][0][&ldquo;Contest&rdquo;][0][&ldquo;Enrolment&rdquo;]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>124215&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classes]]></title>
    <link href="http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/classes/"/>
    <updated>2013-07-31T09:14:00+10:00</updated>
    <id>http://nizhu.github.io/ruby-intro-site/blog/2013/07/31/classes</id>
    <content type="html"><![CDATA[<p>Ruby is a Object Oriented language so it&rsquo;s no less than intuitive to have classes. The following code block shows the basic syntax of a Ruby class.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Counter
</span><span class='line'>  @@classCount = 0
</span><span class='line'>  @instanceCount&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def initialize(startInstanceCount)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>@instanceCount = startInstanceCount
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def icIncrement&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>@instanceCount += 1
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def self.ccIncrement&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>@@classCount += 1
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def to_s&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>"classCount = #{@@classCount} and instanceCount = #{@instanceCount}"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We have a Class variable, <code>@@classCount</code>. This is equivalent to the keyword <code>static</code> in Java. There&rsquo;s an Instance variable <code>@instanceCount</code>.</p>

<p>Then there are the methods. <code>initialize</code> is the constructor used when you run <code>Counter.new</code>, <code>icIncrement</code> is an instance method, while <code>self.ccIncrement</code> is a class method &ndash; called with <code>Counter.ccIncrement</code>.</p>

<p>Finally <code>to_s</code> is the conversion of the class to a String, just like <code>toString()</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = Counter.new 0
</span><span class='line'>b = Counter.new 0&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>a.ccIncrement
</span><span class='line'>a.icIncrement&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>puts b&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>classCount = 1 and instanceCount = 0&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>b = Counter.new 5
</span><span class='line'>puts b&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>classCount = 1 and instanceCount = 5&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Variable Scope</h2>

<p>Scope-wise, there are 5 different types of variables in Ruby and they are simply differentiated by the first character of their name.</p>

<ol>
<li>$: Global</li>
<li>@@: Class</li>
<li>@: Instance</li>
<li>[A-Z]: Constant</li>
<li>[a-z_]: Local</li>
</ol>


<p>Note that Constants can still be changed. The interpreter will simply issue a warning that that is the case, but the value assigning will proceed.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Aconstant = 1
</span><span class='line'>Aconstant = 2&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>warning: already initialized constant Aconstant&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>warning: previous definition of Aconstant was here&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>2&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functions]]></title>
    <link href="http://nizhu.github.io/ruby-intro-site/blog/2013/07/30/functions/"/>
    <updated>2013-07-30T12:55:00+10:00</updated>
    <id>http://nizhu.github.io/ruby-intro-site/blog/2013/07/30/functions</id>
    <content type="html"><![CDATA[<p>Firstly the syntax. Let&rsquo;s first define a very basic function we can use for this post.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def print_stuff(str1, str2, reverse = false)
</span><span class='line'>  if reverse&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>puts "#{str2} and #{str1} received!"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  else&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>puts "#{str1} and #{str2} received!"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end
</span><span class='line'>  str = str1 + str2
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Calling functions</h3>

<p>Brackets around function parameters is optional in Ruby. However, sometimes it&rsquo;s useful to include them regardless for clarity&rsquo;s sake.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>print_stuff(&ldquo;First argument&rdquo;, &ldquo;Second argument&rdquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>First argument and Second argument received!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>print_stuff &ldquo;First argument&rdquo;, &ldquo;Second argument&rdquo;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>First argument and Second argument received!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Arguments can be made optional by giving them a default value.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>print_stuff(&ldquo;First argument&rdquo;, &ldquo;Second argument&rdquo;, false)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>First argument and Second argument received!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>print_stuff(&ldquo;First argument&rdquo;, &ldquo;Second argument&rdquo;, true)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Second argument and First argument received!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Return value</h3>

<p>As you may have already noticed, <code>print_stuff</code> does use <code>return</code> even though it does exist in Ruby and it does exactly what you&rsquo;d expect. If the return value is not specified, Ruby will return the value returned in the last executed line of the block</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def add(a, b)
</span><span class='line'>  a + b
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>puts add(1, 2)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>3&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>def add_return(a, b)
</span><span class='line'>  return a + b
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>puts add_return(1,2)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>3&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>def add_print(a, b)
</span><span class='line'>  a + b
</span><span class='line'>  print &ldquo;add successful&rdquo;
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>puts add_print(1,2)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>add successful&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Because <code>print "add successful"</code> returns <code>nil</code>, <code>add_print</code> returns nil.</p>

<h1>Error Handling</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def do_something
</span><span class='line'>  raise &ldquo;Failed to do something&rdquo;
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>raise_exception&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>RuntimeError: Failed to do something&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>begin
</span><span class='line'>  do_something
</span><span class='line'>  puts &ldquo;Done something&rdquo;
</span><span class='line'>rescue
</span><span class='line'>  puts &ldquo;Rescuing from exception&rdquo;
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Rescuing from exception&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>retry</code> will return the cursor to start of the begin block it belongs to</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>i = 0
</span><span class='line'>begin
</span><span class='line'>  puts &ldquo;#{i}&rdquo;
</span><span class='line'>  i += 1
</span><span class='line'>  if i &lt; 2&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>do_something
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  end
</span><span class='line'>  puts &ldquo;All done!&rdquo;
</span><span class='line'>rescue
</span><span class='line'>  retry
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>0&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>1&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>All done!&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Also relevant later on, <a href="http://innig.net/software/ruby/closures-in-ruby">Closures</a> and <a href="https://rubymonk.com/learning/books/2-metaprogramming-ruby/chapters/32-introduction-to-metaprogramming/lessons/75-being-meta">Metaprogramming</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hash &amp; Symbols]]></title>
    <link href="http://nizhu.github.io/ruby-intro-site/blog/2013/07/29/hash-and-symbols/"/>
    <updated>2013-07-29T22:46:00+10:00</updated>
    <id>http://nizhu.github.io/ruby-intro-site/blog/2013/07/29/hash-and-symbols</id>
    <content type="html"><![CDATA[<p>Maps in the data structure sense is referred to in Ruby as Hashes. Map in Ruby is used in its functional programming definition.</p>

<h3>Construction</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = { &ldquo;a&rdquo; => &ldquo;b&rdquo;, 3 => &ldquo;d&rdquo; }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>{&ldquo;a&rdquo;=>&ldquo;b&rdquo;, 3=>&ldquo;d&rdquo;}&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>b = Hash(&ldquo;a&rdquo; => &ldquo;b&rdquo;, 3 => &ldquo;d&rdquo;)&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>{&ldquo;a&rdquo;=>&ldquo;b&rdquo;, 3=>&ldquo;d&rdquo;}&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>c = {}
</span><span class='line'>d = Hash.new&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>e = Hash.new(0)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Testing for Equality</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a==b&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>true&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>a.equal? b&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>false&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>c==d&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>true&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>c.equal? d&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>false&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Retrieving from Hash</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a[&ldquo;a&rdquo;]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>&ldquo;b&rdquo;&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>a[3]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>&ldquo;d&rdquo;&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>a[4]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>nil&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>e[4]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>0&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Adding values to the Hash</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a[5] = 6
</span><span class='line'>puts a&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>{&ldquo;a&rdquo;=>&ldquo;b&rdquo;, 3=>&ldquo;d&rdquo;, 5=>6}&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Other useful functions</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>b.clear
</span><span class='line'>puts b&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>{}&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>a.empty?&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>false&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>b.empty?&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>true&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>a.length&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>3&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>a.keys&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>[&ldquo;a&rdquo;, 3, 5]&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>a.values&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>[&ldquo;b&rdquo;, &ldquo;d&rdquo;, 6]&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Iterating through the hash</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a.each { |k,v| puts &ldquo;The value for #{k} is #{v}&rdquo; }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>The value for a is b&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>The value for 3 is d&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>The value for 5 is&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>a.each_key { |k| puts &ldquo;The value for #{k} is #{a[k]}&rdquo; }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>The value for a is b&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>The value for 3 is d&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>The value for 5 is 6&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>a.each_value { |v| puts v }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>b&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>d&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>6&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>a.each do |k,v|
</span><span class='line'>  puts &ldquo;The value for #{k} is #{v}&rdquo;
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>The value for a is b&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>The value for 3 is d&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h1>The value for 5 is 6&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
